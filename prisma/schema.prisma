// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  STUDENT
  SUPERADMIN
}

model Batch {
  id        String   @id @default(uuid())
  name      String
  users     User[]
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  password           String?
  role               UserRole          @default(STUDENT)
  regestrationNumber String?
  image              String?
  batchId            String?
  batch              Batch?            @relation(fields: [batchId], references: [id], onDelete: Cascade)
  sections           Section[]
  accounts           Account[]
  worksheets         WorkSheet[]
  progress           StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Grade {
  id        String    @id @default(uuid())
  name      String
  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
}

model Section {
  id        String    @id @default(uuid())
  name      String
  gradeId   String
  grade     Grade     @relation(fields: [gradeId], references: [id])
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  users     User[]

  @@index([gradeId])
}

model WorkSheet {
  id              String            @id @default(uuid())
  name            String
  chapterId       String
  chapter         Chapter           @relation(fields: [chapterId], references: [id])
  teacherId       String
  teacher         User              @relation(fields: [teacherId], references: [id])
  studentprogress StudentProgress[]
  published       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Chapter {
  id         String      @id @default(uuid())
  name       String
  sectionId  String
  section    Section     @relation(fields: [sectionId], references: [id])
  worksheets WorkSheet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProgress {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  worksheetId String
  worksheet   WorkSheet @relation(fields: [worksheetId], references: [id], onDelete: Cascade)
  grading     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
